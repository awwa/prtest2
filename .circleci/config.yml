version: 2
jobs:
  build:
    working_directory: ~/docs
    docker:
      - image: circleci/ruby:2.3.3
        environment:
          BUNDLE_PATH: vendor/bundle
          TZ: /usr/share/zoneinfo/Asia/Tokyo
    steps:
      - checkout
      - restore_cache:
          keys:
            - bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - bundle-{{ .Branch }}-
            - bundle-
      - run:
          name: Resolve dependency for ruby
          command: |
            gem install bundler
            bundle check || bundle install
      - save_cache:
          key: bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Install node.js
          command: |
            curl -O https://nodejs.org/dist/v6.10.1/node-v6.10.1-linux-x64.tar.xz
            tar Jxvf node-v6.10.1-linux-x64.tar.xz
          working_directory: ~/node
      - run:
          name: Resolve dependency for node.js
          command: |
            export PATH=~/node/node-v6.10.1-linux-x64/bin:$PATH
            npm install
            ~/docs/node_modules/bower/bin/bower install
      - run:
          name: Install java
          command: |
            curl -O https://download.java.net/java/GA/jdk9/9.0.4/binaries/openjdk-9.0.4_linux-x64_bin.tar.gz
            tar xvf openjdk-9.0.4_linux-x64_bin.tar.gz
          working_directory: ~/java
      - run:
          name: which rake
          command: which rake
      # - run:
      #     name: Rake Generate
      #     command: |
      #       export PATH=~/java/jdk-9.0.4/bin:$PATH
      #       rake generate
      - save_cache:
          key: docs-{{ .Branch }}-{{ .Revision }}
          paths:
            - ~/docs
  deploy-staging:
    working_directory: ~/docs
    docker:
      - image: circleci/ruby:2.3.3
        environment:
          BUNDLE_PATH: vendor/bundle
          TZ: /usr/share/zoneinfo/Asia/Tokyo

    steps:
      - checkout
      - run:
          name: install aws cli
          command: |
            sudo apt update && sudo apt install python-pip
            sudo pip install awscli
      - restore_cache:
          keys:
            - bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - bundle-{{ .Branch }}-
            - bundle-
      - run:
          name: Resolve dependency for ruby
          command: |
            gem install bundler
            bundle check || bundle install
      - save_cache:
          key: bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Install node.js
          command: |
            curl -O https://nodejs.org/dist/v6.10.1/node-v6.10.1-linux-x64.tar.xz
            tar Jxvf node-v6.10.1-linux-x64.tar.xz
          working_directory: ~/node
      - run:
          name: Resolve dependency for node.js
          command: |
            export PATH=~/node/node-v6.10.1-linux-x64/bin:$PATH
            npm install
            ~/docs/node_modules/bower/bin/bower install
      - run:
          name: Install java
          command: |
            sudo apt-get install openjdk-8
          working_directory: ~/java
      - run:
          name: which rake
          command: ls ~/docs/public

      # - run:
      #     name: Deploy Staging
      #     command: rake S3_BUCKET=sendgrid-jp-docs-stg upload

#   deploy-production:
#     docker:
#       - image: circleci/ruby:2.3.3
#         environment:
#           TZ: /usr/share/zoneinfo/Asia/Tokyo
#       - image: circleci/node:6.13.1-stretch
#     steps:
#       - checkout
#       - restore_cache:
#         keys:
#           - bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
#           - bundle-{{ .Branch }}
#           - bundle-
#       - run:
#         name: Bundle Install
#         command: bundle check || bundle install
#       - run:
#         name: Index
#         command: rake index
#       - run:
#         name: Deploy Production
#         command: rake S3_BUCKET=sendgrid-jp-docs upload
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy-staging:
          requires:
            - build
          filters:
            branches:
              only: master
#       - deploy-production:
#         requires:
#           - build
#         filters:
#           branches:
#             only production
